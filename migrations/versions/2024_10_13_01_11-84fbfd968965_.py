"""empty message

Revision ID: 84fbfd968965
Revises: 3d29382bcd16
Create Date: 2024-10-13 01:11:58.966684

"""

import sqlalchemy as sa
from alembic import op
from djgram.db.pydantic_field import ImmutablePydanticField
from sqlalchemy.dialects import postgresql
from sqlalchemy_file import FileField
import aiogram.types.video
import processing.models
import tools.audio_processing.pipeline
import tools.video_processing.actions.unsilence_actions
import tools.video_processing.pipeline

# revision identifiers, used by Alembic.
revision = "84fbfd968965"
down_revision = "3d29382bcd16"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "audioprocessingprofile",
        sa.Column(
            "audio_pipeline",
            ImmutablePydanticField(tools.audio_processing.pipeline.AudioPipeline, should_frozen=False),
            nullable=False,
        ),
        sa.Column("slug", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_audioprocessingprofile_slug"), "audioprocessingprofile", ["slug"], unique=True)
    op.create_table(
        "playlist",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("source", sa.String(), nullable=False),
        sa.Column("yt_dlp_info", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "unsilenceprofile",
        sa.Column(
            "unsilence_action",
            ImmutablePydanticField(
                tools.video_processing.actions.unsilence_actions.UnsilenceAction, should_frozen=False
            ),
            nullable=False,
        ),
        sa.Column("slug", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_unsilenceprofile_slug"), "unsilenceprofile", ["slug"], unique=True)
    op.create_table(
        "video",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("file", FileField(), nullable=True),
        sa.Column("thumbnail", FileField(), nullable=True),
        sa.Column("meta", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "waiters",
            sa.ARRAY(ImmutablePydanticField(processing.models.Waiter, should_frozen=True)),
            server_default="{}",
            nullable=False,
        ),
        sa.Column("source", sa.String(), nullable=False),
        sa.Column("yt_dlp_info", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "playlist_video",
        sa.Column("playlist_id", sa.String(), nullable=False),
        sa.Column("video_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["playlist_id"],
            ["playlist.id"],
        ),
        sa.ForeignKeyConstraint(
            ["video_id"],
            ["video.id"],
        ),
        sa.PrimaryKeyConstraint("playlist_id", "video_id"),
    )
    op.create_table(
        "processedvideo",
        sa.Column(
            "status",
            sa.Enum("TASK_CREATED", "PROCESSING", "PROCESSED", "IMPOSSIBLE", name="processedvideostatus"),
            nullable=False,
        ),
        sa.Column("impossible_reason", sa.String(), nullable=True),
        sa.Column("original_video_id", sa.String(), nullable=False),
        sa.Column("audio_processing_profile_id", sa.BigInteger(), nullable=False),
        sa.Column("unsilence_profile_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "processing_stats",
            ImmutablePydanticField(tools.video_processing.pipeline.VideoPipelineStatistics, should_frozen=False),
            nullable=True,
        ),
        sa.Column("file", FileField(), nullable=True),
        sa.Column("meta", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "telegram_file", ImmutablePydanticField(aiogram.types.video.Video, should_frozen=True), nullable=True
        ),
        sa.Column(
            "waiters",
            sa.ARRAY(ImmutablePydanticField(processing.models.Waiter, should_frozen=True)),
            server_default="{}",
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.ForeignKeyConstraint(
            ["audio_processing_profile_id"],
            ["audioprocessingprofile.id"],
        ),
        sa.ForeignKeyConstraint(
            ["original_video_id"],
            ["video.id"],
        ),
        sa.ForeignKeyConstraint(
            ["unsilence_profile_id"],
            ["unsilenceprofile.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "original_video_id", "audio_processing_profile_id", "unsilence_profile_id", name="uniq_pipeline"
        ),
    )
    op.create_index(
        op.f("ix_processedvideo_audio_processing_profile_id"),
        "processedvideo",
        ["audio_processing_profile_id"],
        unique=False,
    )
    op.create_index(op.f("ix_processedvideo_original_video_id"), "processedvideo", ["original_video_id"], unique=False)
    op.create_index(
        op.f("ix_processedvideo_unsilence_profile_id"), "processedvideo", ["unsilence_profile_id"], unique=False
    )
    op.create_unique_constraint(None, "telegramchat", ["id"])
    op.create_unique_constraint(None, "telegramchatfullinfo", ["id"])
    op.create_unique_constraint(None, "telegramuser", ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "telegramuser", type_="unique")
    op.drop_constraint(None, "telegramchatfullinfo", type_="unique")
    op.drop_constraint(None, "telegramchat", type_="unique")
    op.drop_index(op.f("ix_processedvideo_unsilence_profile_id"), table_name="processedvideo")
    op.drop_index(op.f("ix_processedvideo_original_video_id"), table_name="processedvideo")
    op.drop_index(op.f("ix_processedvideo_audio_processing_profile_id"), table_name="processedvideo")
    op.drop_table("processedvideo")
    op.drop_table("playlist_video")
    op.drop_table("video")
    op.drop_index(op.f("ix_unsilenceprofile_slug"), table_name="unsilenceprofile")
    op.drop_table("unsilenceprofile")
    op.drop_table("playlist")
    op.drop_index(op.f("ix_audioprocessingprofile_slug"), table_name="audioprocessingprofile")
    op.drop_table("audioprocessingprofile")
    # ### end Alembic commands ###
