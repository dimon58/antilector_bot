services:
  redis:
    image: redis:7.4.0-alpine3.20
    command: /usr/local/etc/redis/run.sh
    hostname: redis
    restart: always
    volumes:
      - redis-data:/data
      - ./docker/redis:/usr/local/etc/redis
    ports:
      - "${REDIS_PORT:-6379}:${REDIS_PORT:-6379}"
    env_file:
      - .env
    profiles:
      - dev
      - production

  postgres:
    image: postgres:17.0-alpine3.20
    hostname: postgres
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      PGPORT: ${POSTGRES_PORT:-5432}
    ports:
      - "${PGPORT:-5432}:${PGPORT:-5432}"
    profiles:
      - dev
      - production

  clickhouse:
    image: clickhouse/clickhouse-server:24.9.1.3278-alpine
    hostname: clickhouse
    restart: always
    ports:
      - "8123:8123"
      - "9000:9000"
      - "9009:9009"
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./docker/clickhouse/config.d:/etc/clickhouse-server/config.d:ro
      - ./logs/clickhouse:/var/log/clickhouse-server
    ulimits:
      nproc: 65535
      nofile:
        soft: 262144
        hard: 262144
    env_file:
      - .env
    profiles:
      - dev
      - production

  rabbitmq:
    image: rabbitmq:4.0.2-management-alpine
    hostname: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - ./docker/rabbitmq:/etc/rabbitmq/conf.d:ro
    env_file:
      - .env
    profiles:
      - dev
      - production

  bot:
    build:
      context: .
      dockerfile: Dockerfile
    command: [ "python", "run_tg_bot.py" ]
    restart: always
    volumes:
      - ./:/app
    env_file:
      - .env
    environment:
      # for nvenc
      # https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/docker-specialized.html#driver-capabilities
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility,video
      - NVIDIA_VISIBLE_DEVICES=all
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - CLICKHOUSE_HOST=clickhouse
      - RABBITMQ_HOST=rabbitmq
      - MINIO_HOST=minio
      - TELEGRAM_LOCAL_SERVER_URL=http://nginx:8083
      - TELEGRAM_LOCAL_SERVER_STATS_URL=http://telegram-bot-api:8082
      - TELEGRAM_LOCAL_SERVER_FILES_URL=http://nginx:8083
    depends_on:
      - redis
      - clickhouse
      - postgres
      - rabbitmq
      - minio
      - telegram-bot-api
      - nginx
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    profiles:
      - production

  minio:
    image: quay.io/minio/minio:RELEASE.2024-10-02T17-50-41Z
    hostname: minio
    restart: always
    command: server --address ":19000" --console-address ":19001" /data
    ports:
      - "19000:19000"
      - "19001:19001"
    env_file:
      - .env
    volumes:
      - minio-data:/data
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 5s
      timeout: 5s
      retries: 5
    profiles:
      - dev
      - production

  minio-init:
    image: quay.io/minio/minio:RELEASE.2024-10-02T17-50-41Z
    entrypoint: /docker-entrypoint-initdb.d/init_users.sh
    restart: on-failure
    env_file:
      - .env
    volumes:
      - ./docker/minio/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    depends_on:
      - minio
    profiles:
      - dev
      - production

  celery:
    extends:
      service: bot
    # Внутри и так используется многопоточность, поэтому нет смысла в нескольких воркерах
    command: celery -A run_celery worker -n worker.common --loglevel=INFO --pool=solo
    depends_on:
      - redis
      - postgres
      - rabbitmq
      - minio
    profiles:
      - production

  celery-download-video:
    extends:
      service: celery
    command: celery -A run_celery worker -n "worker.${VIDEO_DOWNLOAD_QUEUE}" -Q ${VIDEO_DOWNLOAD_QUEUE} --loglevel=INFO --pool=solo
    profiles:
      - production

  celery-process-video:
    extends:
      service: celery
    command: celery -A run_celery worker -n "worker.${VIDEO_PROCESS_QUEUE}" -Q ${VIDEO_PROCESS_QUEUE} --loglevel=INFO --pool=solo
    profiles:
      - production

  celery-upload-video:
    extends:
      service: celery
    command: celery -A run_celery worker -n "worker.${VIDEO_UPLOAD_QUEUE}" -Q ${VIDEO_UPLOAD_QUEUE} --loglevel=INFO --pool=solo
    profiles:
      - production

  init_db:
    extends:
      service: bot
    command: [ "python", "run_init.py" ]
    # Ждём, пока бд запустится окончательно
    restart: on-failure
    profiles:
      - production

  migrate:
    extends:
      service: bot
    command: [ "alembic", "upgrade", "head" ]
    # Ждём, пока бд запустится окончательно
    restart: on-failure
    profiles:
      - production

  telegram-bot-api:
    image: aiogram/telegram-bot-api:latest
    hostname: telegram-bot-api
    pull_policy: always  # Обновляем каждый перезапуск для совместимости с телеграмм
    restart: always
    volumes:
      - telegram-bot-api-data:/var/lib/telegram-bot-api
    env_file:
      - .env
    ports:
      - "8081:8081" # bot api
      - "8082:8082" # статистика
    profiles:
      - dev
      - production

  nginx:
    image: nginx:1.27.2-alpine3.20-slim
    hostname: nginx
    restart: always
    depends_on:
      - telegram-bot-api
    volumes:
      - telegram-bot-api-data:/var/lib/telegram-bot-api:ro
      - ./docker/nginx:/etc/nginx/conf.d/:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - "8083:8083" # раздача файлов, для скачивания через local telegram bot api server
    profiles:
      - dev
      - production

volumes:
  redis-data:
  postgres-data:
  clickhouse-data:
  rabbitmq-data:
  minio-data:
  telegram-bot-api-data:
