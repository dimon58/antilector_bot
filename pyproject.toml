[project]
name = "antilector_bot"
description = "Позволяет улучшать звук в лекциях, удалять участки с тишиной из лекций и конспектировать лекции"
version = "0.1.0"
readme = "readme.md"
package-mode = false
authors = [
    { name = "Dmitry Sharonov" },
]
classifiers = [
    "Private :: Do not Upload",
]
requires-python = "~=3.11"
dependencies = [
    "aiogram>=3.17.0",
    "alembic>=1.14.1",
    "apache-libcloud>=3.8.0",
    "asyncpg>=0.30.0",
    "cashews>=7.4.0",
    "celery>=5.4.0",
    "coloredlogs>=15.0.1",
    "deepfilternet>=0.5.6",
    "djgram",
    "faster-whisper>=1.1.1",
    "ffmpeg-normalize>=1.31.0",
    "hiredis>=3.1.0",
    "httpx>=0.28.1",
    "lazy-object-proxy>=1.10.0",
    "markdown-it-py>=3.0.0",
    "onnxruntime>=1.20.1",
    "openai>=1.61.1",
    "orjson>=3.10.15",
    "pandas>=2.2.3",
    "pillow>=11.1.0",
    "prettytable>=3.14.0",
    "pyaudiotoolslib>=0.0.2",
    "pydantic>=2.10.6",
    "python-dotenv>=1.0.1",
    "python-ffmpeg>=2.0.12",
    "python-json-logger>=3.2.1",
    "pyyaml>=6.0.2",
    "redis>=5.2.1",
    "silero-vad>=5.1.2",
    "socksio>=1.0.0",
    "soundfile>=0.13.1",
    "torch>=2.6.0",
    "torchaudio>=2.6.0",
    "tqdm>=4.67.1",
    "yt-dlp>=2025.1.26",
]

[dependency-groups]
dev = [
    "pre-commit>=4.1.0",
    "pytest>=8.3.4",
    "ruff>=0.9.4",
]

[tool.uv.sources]
torch = [
    { index = "pytorch-cu124" },
]
torchvision = [
    { index = "pytorch-cu124" },
]
djgram = { workspace = true }

[[tool.uv.index]]
name = "pytorch-cu124"
url = "https://download.pytorch.org/whl/cu124"
explicit = true

[tool.uv.workspace]
members = ["djgram"]

# ==== pytest ====
[tool.pytest.ini_options]
minversion = "8.3"
python_files = [
    "tests.py",
    "test_*.py",
]
testpaths = [
    "tests",
]

# ==== ruff ====
[tool.ruff]
# Many copied from dewfault config from documentation https://docs.astral.sh/ruff/configuration/
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pycache__",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.11
target-version = "py311"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN002", "ANN003", "ANN204",
    "D100", "D104", "D105", "D200", "D202", "D205", "D212", "D415",
    "EM101", "EM102", "INP001", "TRY003",
    "RUF001", "RUF002", "RUF003", "FIX", "TD",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tg_bot/apps/*/admin.py" = ["ARG002", "D101", "D102", "RUF012"]
"tg_bot/apps/*/dialogs/callbacks.py" = ["ANN201", "ARG001", "D103", "TID252"]
"tg_bot/apps/*/dialogs/dialogs.py" = ["TID252"]
"tg_bot/apps/*/dialogs/getters.py" = ["ANN201", "ARG001", "D103", "TID252"]
"tg_bot/apps/*/handlers.py" = ["ANN201", "ARG001"]
"tg_bot/apps/*/models.py" = ["D101"]
"libs/nisqa/*" = [
    "ANN001", "ANN201", "ARG001", "B006", "B904",
    "D101", "D102", "D103", "D107", "E722",
    "FBT001", "FBT002", "N801", "N806", "N812",
    "PLR0913", "PLW2901", "PTH123", "RET504",
    "S506", "SIM108", "SLF001",
]
"libs/unsilence/*" = ["D101", "D102", "D103"]
"libs/unsilence_fast/*" = ["D101", "D102"]
"migrations/env.py" = ["D103"]
"migrations/versions/*.py" = ["D103"]
"processing/*" = ["D101", "D102", "D103"]
"tests/**/*.py" = ["D101", "D102"]
"tools/audio_processing/*" = ["D101", "D102", "D103"]
"tools/video_processing/*" = ["D101", "D102", "D103"]
"tools/yt_dlp_downloader/*" = ["D101", "D102", "D103"]
"utils/*" = ["D101", "D102", "D103"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 8.
max-complexity = 8

[tool.ruff.lint.isort]
default-section = "third-party"
known-first-party = []
split-on-trailing-comma = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

# ==== pyright ====
[tool.pyright]
exclude = [
    ".mypy_cache",
    "**/__pycache__",
    "dev",
    ".venv",
    "venv",
    "migrations/env.py",
]
